openapi: 3.0.0
x-stoplight:
  id: umm0in1sr7ncy
info:
  title: sample-api
  version: '1.0'
servers:
  - url: 'http://localhost:8080'
paths:
  /auth/login:
    post:
      summary: Login
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  email:
                    type: string
                    format: email
                  accessToken:
                    type: string
        '400':
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      operationId: post-auth-login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                "\_account":
                  type: string
                password:
                  type: string
  /auth/register:
    post:
      summary: Register
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  email:
                    type: string
                    format: email
                  accessToken:
                    type: string
        '400':
          description: Bad Request
      operationId: post-auth-register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                phoneNumber:
                  type: string
                dob:
                  type: string
                  format: date-time
                gender:
                  type: string
                password:
                  type: string
  /users:
    get:
      summary: ''
      operationId: get-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    parameters: []
    post:
      summary: ''
      operationId: post-users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                phoneNumber:
                  type: string
                dob:
                  type: string
                  format: date-time
                gender:
                  type: string
                password:
                  type: string
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content: {}
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: ''
      operationId: patch-users-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                phoneNumber:
                  type: string
                dob:
                  type: string
                  format: date-time
                gender:
                  type: string
                password:
                  type: string
                role:
                  type: string
    delete:
      summary: ''
      operationId: delete-users-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /post:
    get:
      summary: Get post
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                type: object
                properties: {}
      operationId: get-post
      parameters: []
    post:
      summary: Add post
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      operationId: post-post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
                authorId:
                  type: integer
components:
  schemas:
    User:
      title: User
      type: object
      x-examples:
        Example 1:
          id: 0
          username: string
          email: user@example.com
          phoneNumber: string
          dob: '2019-08-24T14:15:22Z'
          gender: string
          createdAt: '2019-08-24T14:15:22Z'
          updatedAt: '2019-08-24T14:15:22Z'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        username:
          type: string
        email:
          type: string
          format: email
        phoneNumber:
          type: string
        dob:
          type: string
          example: '2019-08-24T14:15:22Z'
          format: date-time
        gender:
          type: string
          description: Set to true if the user's email has been verified.
        createdAt:
          type: string
          description: The date that the user was created.
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - email
        - phoneNumber
    Post:
      title: Post
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        body:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      x-examples:
        Example 1:
          id: 0
          title: This is my title
          body: This is my content
          createdAt: '2019-08-24T14:15:22Z'
          updatedAt: '2019-08-24T14:15:22Z'
